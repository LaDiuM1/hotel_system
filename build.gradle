plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '1.8'
}

repositories {
    mavenCentral()
}

dependencies { // 외부 라이브러리 추가하는 곳 => 자동으로 해당 라이브러리 다운로드 받고 프로젝트에 빌드
    implementation 'org.springframework.boot:spring-boot-starter-web' // springboot web
    runtimeOnly 'com.mysql:mysql-connector-j'                           // mysql 라이브러리
    compileOnly 'org.projectlombok:lombok'                              // 롬복 라이브러리
    annotationProcessor 'org.projectlombok:lombok'                      // 롬복 라이브러리

    implementation 'org.springframework.boot:spring-boot-starter-security' // 보안
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 라이브러리
    //developmentOnly 'org.springframework.boot:spring-boot-devtools' // 자동빌드
}

tasks.named('test') {
    useJUnitPlatform()
}
//--------------- 리액트(빌드) 통합 ------------------- //
def frontendDir  = "$projectDir/src/main/reactapp"; //$projectDir/src/main/{리액트프로젝트명}
sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact( type : Exec ){
    workingDir "$frontendDir" // 리액트코드가 있는 폴더경로
    inputs.dir "$frontendDir" // 빌드했을 때 저장할 폴더경로
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install' }
    else {
        commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
    }

}


task buildReact( type : Exec ){
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }

}
task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}

